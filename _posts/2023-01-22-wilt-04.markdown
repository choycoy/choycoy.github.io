---
title: "What I learnt today 22/01/23"
tags:
  - WILT
  - Python
---
ðŸ’¡ This post introduces what I learnt today 22/01/23.
{: .notice--warning}

# 1. Exception
- predictable exception: exceptions that can be recognised in advance.
<br>
e.g. Wrong input by user, no file when calling file: must be explicitly defined by the developer.
- unpredictable exception: exceptions that occur during the interpreter process, developer mistakes.
<br>
e.g. call values outside the range of the list, divide by inter 0: automatically invoked by interpreter when execution is not possible.
-> need exception handling, try ~ except grammar

```
try:
    code that can throw an exception
except <Exception Type>:
    code to respond when an exception occurs
```


```
for i in range(10):
    try:
        print(10/i)
    except ZeroDivisionError:
        print("Not divided by 0")
```

- Built- in Exception: basic exceptions are provided
<br>
(1) `IndexError`: when the index range of the list is exceeded
<br>
(2) `NameError`: when calling a variable that does not exist
<br>
(3) `ZeroDivisionError`: when dividing a number by zero
<br>
(4) `ValueError`: when converting the string/number that can not be converted
<br>
(5) `FileNotFoundError`: when calling the file that does not exist

```
for i in range(10):
    try:
        print(10 / i)
    except ZeroDivisionError as e:
        print(e)
        print("Not divided by 0")
```
- `try~except~else`


```
try:
    code that can throw an exception
except <Exception Type>:
    code to respond when an exception occurs
else:
    code to respond when an exception does not occur
```

```
for i in range(10):
    try:
        result = 10/i
    except ZeroDivisionError:
        print("Not divided by 0")
    else:
        print(10/i)
```

- `try~except~finally`

```
try:
    code that can throw an exception
except <Exception Type>:
    code to respond when an exception occurs
finally:
    executed whether or not an exception occurs
```

```
try:
    for i in range(1, 10):
      result =  10//i
      print(result)
except ZeroDivisionError:
    print("Not divided by 0")
finally:
  print("It is over.")
```

- `raise exception`: Forcibly throws an exception as needed

```
raise <Exception Type> (Exception)
```

```
while True:
    value = input("Please enter an integer value to convert")
    for digit in value:
        if digit not in "01234556789":
            raise ValueError("You have not entered the number value.")
    print("A number converted to an integer value -", int(value))
```

- `assert exception`: throws an exception if certain conditions are not satisfied

```
assert exception condition
```

```
def get_binary_number(decimal_number):
    assert isinstance(decimal_number, int)
    return bin(decimal_number)

print(get_binary_number)
```

The `isinstance() function` returns True if the specified object is of the specified type, otherwise False.
e.g. Check if "Hello" is one of the types described in the type parameter:
```
x = isinstance("Hello", (float, int, str, list, dict, tuple))
```

# 2. File Handling
- Python File I/O, `open` is used to handle file in python
```
f = open("<File Name>", "Access Mode")
f.close()
```
(1) `r`: read mode, used when only reading a file
<br>
(2) `w`: write mode, used when only writing a file
<br>
(3) `a`: add mode, used when adding new contents in the end of file
- `read()`: return the contents in the txt file as string
```
f = open("example.txt", "r")
contents = f.read()
print(contents)
f.close()
```
- read() with `with`
```
with open("example.txt", "r") as my_file:
    contents = my_file.read()
    print(type(contents), contents)
```

- `readlines`: read line by line and return as list type
```
with open("example.txt", "r") as my_file:
    content_list = my_file.readlines()
    print(type(content_list))
    print(content_list)
```

- Read one line at each execution
```
with open("example.txt", "r") as my_file:
    i = 0
    while True:
        line = my_file.readline()
        if not line:
            break
        print(str(i) + "===" + line.replace("\n", ""))
        i = i + 1
```

- Word statistical information calculation

```
with open("example.txt", "r") as my_file:
    contents = my_file.read()
    word_list = contents.split(" ")
    line_list = contents.split("\n")

print("Total number of characters:", len(contents))
print("Total number of words:", len(word_list))
print("Total number of lines:", len(line_list))
```
- Python's File Write, mode = "w", encoding ="utf8"
```
f = open("count_log.txt", 'w', encoding = "utf8")
for i in range(1,11):
    data = "the %d row. \n" % i
    f.write(data)
f.close()
```

- Mode "a" is addition mode
```
with open("count_log.txt", 'a', encoding = "utf8") as f:
    for i in range(1,11):
    data = "the %d row. \n" % i
    f.write(data)
```
- Handling directory using os module
```
import os
os.mkdir("log")
```
- Check whether the directory does exist or not
```
if not os.path.isdir("log"):
    os.mkdir("log")
```
- Create Log File

```
import os
if not os.path.isdir("log"):
    os.mkdir("log")
if not os.path.exists("log/count_log.txt"):
    f = open("log/count_log.txt", "w", encoding = "utf8")
    f.write("The record is started\n")
    f.close()

with open("log/count_log.txt", 'a', encoding ="utf8") as f:
    import random, datetime
    for i in range (1,11):
        stamp = str(datetime.datetime.now())
        value = random.random() *1000000
        log_line = stamp + "\t" + str(value) + "value is created" + "\n"
        f.write(log_line)
```
- `shutil.copy`: file copy function
```
import shutil
source  = "example.txt"
test = os.path.join("abc", "example2.txt")
shutil.copy(source, dest)
```
example.txt exists in the abc directory.

- `Pickle`: A built-in object that **persists** Python's objects, store information during execution such as data and objects -> `load` it and use it, there are many uses such as information to be stored, calculation results (models), etc.

```
import pickle

f = open("list.pickle", "wb") //write binary file
test = [1,2,3,4,5]
pickle.dump(test, f)
f.close()

f = open("list.pickle", "rb") //read binary file
test_pickle = pickle.load(f)
print(test_pickle)
f.close()
```

```
import pickle

class Multiply(object):
  def __init__(self, multiplier):
      self.multiplier = multiplier
  def multiply(self, number):
      return number * self.multiplier

multiply = Multiply(5)
multiply.multiply(10)

 f = open("multiply_object.pickle", "wb")
 pickle.dump(multiply, f)
 f.close()

 f  = open("multiply_object.pickle", "rb")
 multiply_pickle = pickle.load(f)
 multiply_pickle.multiply(5)
 ```

# 3. Logging Handling
- `Logging`: recording information that occurs while a program is running, user access program exception, use of specific function, print it on console screen, record it in file, record it in DB, etc, analyse recorded logs to derive meaningful results, records to be left at the time of execution, records to be left at the time of development.

- `print` vs `logging` : it is also possible to record in `print`, however, records left only in the console window cannot be used for analysis, sometimes it is necessary to record `by level`(development, operation), there is a need to record separate logging for each module, a module that systematically supports these functions is required.

- Python's basic log management module

```
import logging

logging.debug("Wrong!")
logging.info("Need confirm")
logging.warning("Be careful")
logging.error("You have got an error")
logging.crticial("You are in danger")
```
- `logging level`: depending on the progress of the program, logs of different levels are output, supports so that different logs can be left at each development and operation time, **DEBUG > INFO > WARNING > ERROR > CRITICAL**, the most basic setting information for `log management`.
<br>
<br>
(1)`debug`: leaves log information that needs to be recorded during development, e.g. call A as next function, change variable A to something.
<br>
(2)`info`: notification of information while processing is in progress, e.g. server started, server shut down, user A accesses the program.
<br>
(3)`warning`: it is possible to process incorrectly entered information by the user, but notify when **unintended information** is received during original development, e.g. str input was expected, but int was entered -> processing with `Str casting`, expected a two-dimensional list as an argument to the function but a one-dimensional list is entered -> processing after converting it to two-dimensional
<br>
(4)`error`: notification that an error occurred due to `incorrect processing`, but the program can operate, e.g. need to write to a file but the file does not exist -> notify the user after handling the `exception`, unable to connect to external services
<br>
(5)`critical`: notification of data loss or program can **no longer operate** due to `incorrect processing`, e.g. the file was deleted due to incorrect access, forced shutdown by user.

```
import logging

if __name__ =='__main__':
    logger = logging.getLogger("main")
    logging.basicConfig(level = logging.DEBUG)
    logger.setLevel(Logging.INFO)

  # stream_handler = logging.FileHandler(
  #   "my.log", mode = "w", encoding = "utf8")
  # logger.addHandler(stream_handler)

    logging.debug("Wrong!")
    logging.info("Need confirm")
    logging.warning("Be careful")
    logging.error("You have got an error")
    logging.crticial("You are in danger")
```
`stream_handler` determines where the output will be printed.
<br>
<br>
However, in logging, when running the actual program, several settings are required such as data file location, file storage location, operation type, etc. We need a way to set this information.

- (1)`configparser`: in the file, saves the execution settings of the program to a file, use a configuration file set in the form of section, `key` and `value`, use after calling the setting file as a **dict type**.

```
import configparser
congif = configparser.ConfigParser()
config.sections()

config.read('example.cfg')
config.sections()

for key in config['SectionOne']:
    print(key)

config[`SectionOne`]["status"]
```
![config](https://user-images.githubusercontent.com/40441643/214248488-706ec971-25a1-40ac-a32c-9e9f05c1d6eb.PNG)

- (2) `argparser`: at run time, setting information is saved when running the program in the **console window**, almost all console-based python programs provided as standard, there are many special modules(TF), but argparse is generally used, called the command-line option.

```
import argparse

parser = aparse.ArgumentParser(description="Sum two integers.")

parser.add_argument('-a', "--a_value", dest = "A_value", help = "A integers", type = int)
parser.add_argument('-b', "--b_value", dest = "B_value", help = "B integers", type = int)

args = parser.parse_args()
print(args)
print(args.a)
print(args.b)
print(args.a + args.b)
```
- `Logging formatter`: the format of the log result can be specified.
```
formatter = logging.Formatter('%(asctime)s %(levelname)s %(process)d %(message)s')
```
![loggingformatter](https://user-images.githubusercontent.com/40441643/214252819-ffd16628-e8d5-4867-a799-66efa48fa26b.PNG)

- Log config file
```
logging.config.fileConfig('logging.conf')
logger = logging.getLogger()
```
![logconfig](https://user-images.githubusercontent.com/40441643/214253677-acd58d1e-24fd-462b-8236-c41ab0c6e142.PNG)
